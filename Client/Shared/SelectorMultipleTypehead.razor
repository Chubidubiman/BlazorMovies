@using Blazored.Typeahead
@typeparam T

<BlazoredTypeahead TValue="T" 
    TItem="T" 
    SearchMethod="SearchMethod" 
    Value="sampleItem"
    ValueChanged="ElementSelected"
    ValueExpression="@(() => sampleItem)">
    <ResultTemplate>
        @MyResultTemplate(context)
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, no records found.
    </NotFoundTemplate>
    <SelectedTemplate>

    </SelectedTemplate>
</BlazoredTypeahead>

<ul class="list-group">
    @foreach (var item in ItemsSelected)
    {
        <li draggable="true"
            @ondragstart="@(() => HandleDragStart(item))"
            @ondragover="@(() => HandleDragOver(item))"
            class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span
                @onclick="@(() => ItemsSelected.Remove(item))"
                class="badge bg-primary rounded-pill" 
                style="cursor:pointer">
                X
            </span>
        </li>
    }
</ul>

@code {
    [Parameter, EditorRequired]
    public Func<string, Task<IEnumerable<T>>> SearchMethod 
        { get; set; } = null!;
    [Parameter]
    public List<T> ItemsSelected { get; set; } = new List<T>();
    [Parameter, EditorRequired]
    public RenderFragment<T> MyResultTemplate { get; set; } = null!;
    [Parameter, EditorRequired]
    public RenderFragment<T> MyListTemplate { get; set; } = null!;
    T? sampleItem = default(T);
    T? itemDragged;
    private void HandleDragStart(T item)
    {
        itemDragged=item;
    }
    private void HandleDragOver(T item)
    {
        if(itemDragged is null)
        {
            return;
        }
        if(!item.Equals(itemDragged))
        {
            var indexItemDragged = ItemsSelected.IndexOf(itemDragged);
            var indexElement = ItemsSelected.IndexOf(item);
            ItemsSelected[indexElement] = itemDragged;
            ItemsSelected[indexItemDragged] = item;
        }
    }
    private void ElementSelected(T item)
    {
        if(!ItemsSelected.Any(x => x.Equals(item)))
        {
            ItemsSelected.Add(item);
        }
        sampleItem = default(T);
    }
}